.step(
  data-title='How it Works',
  data-file='lib/confirmation_sender.rb')
  :markdown
    ## About this Application

    This [Ruby on Rails](http://rubyonrails.org) application example
    demonstrates how to implement an SMS two-factor authentication using Twilio.

    _To run this application yourself [download the code and follow the
    instructions on GitHub](https://github.com/TwilioDevEd/sms2fa-rails)._

    Adding two-factor authentication (2FA) to your web application increases the
    security of your user's data. [Multi-factor
    authentication](http://en.wikipedia.org/wiki/Multi-factor_authentication)
    determines the identity of a user in two steps. The first being validation by logging
    into the app, and the second validation would be through their mobile devices using
    an SMS one time **verification code**.

    Let's get started!

    ---

    **See Also:**

    * [REST API: Sending SMS or MMS](//www.twilio.com/docs/api/rest/sending-messages)

.step(
  data-title='Generating a Verification Code',
  data-file='lib/code_generator.rb')
  :markdown
    ## Generating a Verification Code

    The Ruby interface used to generate pseudo-random number let us to easily
    generate a _verification code_.

    To generate our _verification code_ we use `Random#rand` which can take a
    _range_ as an argument. Considering the current implementation our _6-digits
    verification code_ could be any number between **100,000** and **999,999**.

    You are probably wondering how to send a text message with the _verification
    code_ we generated. Let's see how to send text messages with Twilio.

    ---

    **See Also:**

    * [Ruby Docs: Random](//ruby-doc.org/core-2.2.0/Random.html)
    * [Ruby Docs: Range](//ruby-doc.org/core-2.2.0/Range.html)

.step(
  data-title='Sending a Verification Code',
  data-file='lib/message_sender.rb',
  data-highlight='3-5,7-11')
  :markdown
    ## Sending a Verification Code

    The Twilio helper library allows us to send an SMS concisely.

    First you have to create an instance of a **Twilio Client** with your
    credentials. As you can see you can create a text message by calling the
    method `create`.

    You can find your credentials at your [Twilio Account](//www.twilio.com/user/account/phone-numbers/incoming).

    ---

    **See Also:**

    * [Twilio Ruby Helper Library](//twilio-ruby.readthedocs.org/en/latest/)
    * [Twilio: Sending a Text Message](//twilio-ruby.readthedocs.org/en/latest/usage/messages.html#sending-a-text-message)


.step(
  data-title='Registering a User',
  data-file='app/controllers/users_controller.rb',
  data-highlight='6,15-24')
  :markdown
    ## Registering a User

    When a **user** signs up for our website, we use this controller to handle
    the operations related to the creation of the user in the database, as well
    as sending them a _verification code_.

    In order to do two-factor authentication we need to make sure we ask for the
    user's **phone number**.

    Let's see how we implemented the `send_confirmation_to` method.

    ---

    **See Also:**

    * [Getting Started with Rails](//guides.rubyonrails.org/getting_started.html)

.step(
  data-title='Putting It All Together',
  data-file='lib/confirmation_sender.rb')
  :markdown
    ## Putting It All Together

    Using the building blocks we've created in the previous steps we need a place
    to generate a _verification code_ and then send it out to the
    user.

    There is an intermediate step where you update the user with the
    _verification code_. This _verification code_ will be used for
    authentication purposes.

    Let's take a look on how to implement the actual 2-Step verification.

    ---

    **See Also:**

    * [Using Services to Keep Your Rails Controllers Clean and DRY](//blog.engineyard.com/2014/keeping-your-rails-controllers-dry-with-services)

.step(
  data-title='Implementing the 2-Step Verification',
  data-file='app/controllers/confirmations_controller.rb',
  data-highlight='6-18')
  :markdown
    ## Implementing the 2-Step Verification

    When the **user** receives an SMS with the _verification code_ we need to
    ensure the given code is valid.

    This validation is achieved by comparing the user's **verification code**
    with the _verification code_ the user inputs on the form.

    ![Confirm Verification Code](http://howtodocs.s3.amazonaws.com/sms-2fa-authentication.png)

    If the validation was successful the application allows the user to have
    access to the protected content. Otherwise the application will prompt for
    the _verification code_ once again.

    ---

    **See Also:**

    * [Ruby on Rails Security Guide](//guides.rubyonrails.org/security.html)
    * [Action Controller Overview: Parameters](//guides.rubyonrails.org/action_controller_overview.html#parameters)

.step
  :markdown
    ## Where to next?

    That's it! We've just implemented an SMS Two-Factor Authenticated
    application. If you're a Rails developer working with Twilio, you might want
    to check out these other tutorials.

    [**Workflow Automation**](//www.twilio.com/docs/tutorials/walkthrough/workflow-automation/ruby/rails)

    Increase your rate of response by automating the workflows that are key
    to your business. In this tutorial, learn how to build a ready-for-scale
    automated SMS workflow, for a vacation rental company.

    [**Masked Numbers**](//www.twilio.com/docs/tutorials/walkthrough/masked-numbers/ruby/rails)

    Protect your users' privacy by anonymously connecting them with Twilio
    Voice and SMS. Learn how to create disposable phone numbers on-demand,
    so two users can communicate without exchanging personal information.

    ### Did this help?

    Thanks for checking out this tutorial! If you have any feedback
    to share with us, we'd love to hear it. [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
